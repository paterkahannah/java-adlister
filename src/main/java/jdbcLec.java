import com.mysql.jdbc.Driver;
import java.sql.*;

public class jdbcLec {

    public static void main(String[] args) throws SQLException {

        Config config = new Config();

        Connection connection = DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());
        // Instantiating the MySQL Driver to register to the built in Java Driver Manager
        DriverManager.registerDriver(new Driver());

        // Connect the database by providing url, user, and pass // with whatever credentials you want to connect in with
//        Connection connection = DriverManager.getConnection(
//                "jdbc:mysql://localhost/codeup_test_db?serverTimezone=UTC&useSSL=false", // note I am specifying the database I want to access, I will need to change accordingly if I want a different database
//                "root", // can also use personal user admin you made.... but root and codeup simple to remember
//                "codeup"
//        );

        // Creating a statement with statement interface to execute queries
        Statement statement = connection.createStatement();

        // now we are using the statement object we just made to make our queries, 3 methods below.....
        // If this query is exected it will return true or false depending on if items were deleted or not deleted
//        statement.execute("DELETE FROM albums WHERE is = 4");

//        statement.executeUpdate("INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)"); // something we can use for an insert or update query

        // returns a result set query
//        statement.executeQuery("SELECT * FROM albums"); // mainly for SELECT queries

        // handling the results with the ResultSet Object
        String selectQuery = "SELECT * FROM albums";
        ResultSet resultSet = statement.executeQuery(selectQuery);

        // here we are calling the .next() method to iterate over the rows, this will return as true as long as there are rows left to go through // this returns a boolean as well, commonly used with a while loop
        while(resultSet.next()) {
            // what we will do with each row
            System.out.println("Here is an album: ");
            System.out.println(" id:" + resultSet.getLong("id")); // we have t oget the data type and name of the column, need to make sure im getting the right ones
            System.out.println(resultSet.getString("artist"));
            System.out.println(resultSet.getString("name"));
        }

        String insertQuery = "INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)";

        // for executeUpdate method, we CAN have two arguments: 1 - Query String, 2 - is a constant from the statement object
        // this const gives access to the id's that are automatically generated by the database

        statement.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);

        // we can then use getGeneratedKeys() method on the ResultSet Object which will hold the ID's generated in the database
        ResultSet rsKeys = statement.getGeneratedKeys();
        if (rsKeys.next()) {
            System.out.println("Inserted a new record! New ID is: " + rsKeys.getLong(1));
        }

    }
}
